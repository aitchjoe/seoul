name: Mirror container image

on:
  workflow_dispatch:
    inputs:
      source_repository:
        description: '源制品名称（包含域名、不含 Tag）'
        required: true
        default: 'gcr.io/kaniko-project/executor' 
      target_repository:
        description: '目标制品名称（包含域名、不含 Tag，暂时只支持发布到本项目内及 `docker.io/aitchjoe`）'
        required: true
      image_tag:
        description: '源和目标制品 Tag'
        required: true
        default: 'v1.7.0' 
      target_image_platform:
        description: '目标制品平台'
        required: true
        type: choice
        default: 'linux/amd64' 
        options:
        - linux/amd64
        - all

env:
  CRANE_TGZ: https://github.com/google/go-containerregistry/releases/download/v0.11.0/go-containerregistry_Linux_x86_64.tar.gz

jobs:
  mirror-image:

    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idruns-on
    runs-on: ubuntu-22.04

    # https://docs.github.com/en/actions/using-jobs/running-jobs-in-a-container
    #
    # container:
    #  image: gcr.io/go-containerregistry/crane:v0.11.0
    #  options: --entrypoint ""
    #
    # 参考 [Using with GitLab](https://github.com/google/go-containerregistry/tree/v0.11.0/cmd/crane#using-with-gitlab) 使用以上配置，但 `entrypoint` 未生效仍是默认的 `--entrypoint "tail"`，从而出错（当然大部分容器都会带 `tail`）：
    # 
    # ```
    # /usr/bin/docker create ...... --entrypoint "" ...... --entrypoint "tail" gcr.io/go-containerregistry/crane:v0.11.0 "-f" "/dev/null"
    #
    # Error response from daemon: failed to create shim: OCI runtime create failed: container_linux.go:380: starting container process caused: exec: "tail": executable file not found in $PATH: unknown
    # ```
    #
    # 在 [Docker's entrypoint its not been executing when a pipeline starts](https://github.com/actions/runner/issues/1964) 有提及：
    #
    # > Right now, you cannot overwrite the entrypoint by providing it as an argument, since an additional argument will be added by default specifying --entrypoint "tail" and arguments -f /dev/null.
    #
    # 因此直接使用之下的 `wget` 获取 crane。

    steps:
      - name: Mirror image

        # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
        env:
          SOURCE_IMAGE: ${{ inputs.source_repository }}:${{ inputs.image_tag }}
          TARGET_IMAGE: ${{ inputs.target_repository }}:${{ inputs.image_tag }}
          TARGET_IMAGE_PLATFORM: ${{ inputs.target_image_platform }}

        run: |
          TARGET_REGISTRY=$(echo "$TARGET_IMAGE" | awk -F/ '{print $1}')
          if [[ $TARGET_IMAGE == ghcr.io/$GITHUB_REPOSITORY/* ]]; then
            U=anyname
            P=${{ secrets.GITHUB_TOKEN }}
          elif [[ $TARGET_IMAGE == docker.io/aitchjoe/* ]]; then
            # 如果 `U=` 也引用 `secrets.DOCKERHUB_USERNAME`（值为 `aitchjoe`）则日志中的 `aitchjoe` 也会全变为星号。
            U=aitchjoe
            P=${{ secrets.DOCKERHUB_TOKEN }}
          else
            echo 暂时只支持发布至本项目内（ghcr.io/$GITHUB_REPOSITORY）或 docker.io/aitchjoe
            exit 1
          fi
          wget -q -c $CRANE_TGZ -O - | tar -xz -C /tmp && shopt -s expand_aliases && alias crane=/tmp/crane
          crane auth login -u $U -p $P $TARGET_REGISTRY
          crane cp $SOURCE_IMAGE $TARGET_IMAGE --platform $TARGET_IMAGE_PLATFORM
